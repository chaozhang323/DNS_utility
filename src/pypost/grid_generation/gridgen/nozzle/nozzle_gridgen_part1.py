from util import IO_util, util_tp, util_grid
import numpy as np
from util import gridgen


def main():
   ###---parameters----###
    shape = (500,100)
    # Files required to start interpolation
    dir_in = '/usr/local/home/yl8bc/duannas/'
    filename_fluent = 'jhyt7/Acoustics/HLB/Interp_Fluent_DNS/nozzle2d_fluent.dat'
    filename_outlet = 'Test_Incompact3d/HLB_Nozzle/AcousticZgrid_k500.dat'
    # Files generated by the program
    dir_out = '../../data/nozzle/'
    filename_out = 'nozzle_grid_test'
    ###---no parameters below---#
    #----read fluent grid & data-----!
    dset, zones_name, vars_name = util_tp.read_tp(dir_in+filename_fluent)
    data_wall, nodemap = util_tp.read_tp_zone(dset, 'nozzlewall', vars_name)
    
    ## define boundary
    x0 = data_wall['X'][0]
    xm = data_wall['X'][-1]
    y0 = data_wall['Y'][0]
    ym = data_wall['Y'][-1]

    choice_left = np.stack([np.ones((2**16,))*x0,
                            np.linspace(0.,y0, 2**16)], axis=1)
                           # y0*normalized_flipped(grid_outlet['SubZone']['z'], ny)], axis=1)

    choice_right = np.stack([np.ones((2**16,))*xm,
                            np.linspace(0.,ym, 2**16)], axis=1)
                            # ym*normalized_flipped(grid_outlet['SubZone']['z'], ny)], axis=1)

    choice_bottom = np.stack([np.linspace(x0, xm, 2**16),
                              np.zeros((2**16,))], axis=1)

    choice_top = np.stack([data_wall['X'],
                           data_wall['Y']], axis=1)
    choice_top = gridgen.cm_gridgen.refine_boundary(choice_top, 2**16/choice_top.shape[0])

    ## compute
    u,v = util_grid.gridgen_orth(shape, choice_left, choice_right, choice_bottom, choice_top, dir_out+filename_out, varname=['x','z'], tol_in=1.e-8, tol_bdry=0, nsave=64, fixed_boundary=[0,0,0,0])


def normalized_flipped(u, nx):
    uscale = u[-1] - u[0]
    u -= u[0]
    u /= uscale
    u = np.flip(u, axis=0)
    u = 1. - u
    nx0 = u.shape[0]
    u = np.interp( np.linspace(0.,nx0-1.,nx), np.linspace(0.,nx0-1.,nx0), u)

    return u

if __name__ == '__main__':
    main() 
